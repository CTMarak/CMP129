class = reference object

value objects - most are passed to functions by value as a copy; changes in function not reflected in original.
reference objects - like classes; a reference of the object is passed to the function; changes in the function change the original.

ref keyword makes value be treated as a reference
can't pass a reference object by value

public static void myFunc(ref int num)

int myInt;
myFunc(ref myInt);

stack - pointers to objects on heap
.
.
.
heap - dynamically created objects

struct myStruct
{
}

struct is a limited object like a class, but are value objects
structs don't inherit, can't implement an interface

interface myInterface (often ends in ...able)
{
	void myFunc();
}
can only contain definitions
implemented interface parts must be implemented as public
can inherit from as many interfaces as you want

Inheritence - derivedClass : baseClass
derived class gets stuff from base class
public - inherited
private - not inherited but present (cannot be accessed or changed from within the class)
protected - inherited

internal - anything inside the name space(?) or project(?) or dll(?) can see this - not sure which

List<Class> myClass = new List<Class>());
for (int i = 0 ; i < 5 ; i++)
{
	myClass.Add(new Class();
}